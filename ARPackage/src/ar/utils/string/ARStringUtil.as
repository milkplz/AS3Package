/** * AnotherRainbow * @author Zzanzza */package ar.utils.string{	import flash.display.BitmapData;
	import flash.geom.Matrix;
	import flash.text.TextField;
		public class ARStringUtil {		public function ARStringUtil() {}				static public function split($string:String, $delim:String, $removeSpecialSymbol:Boolean = false):Array		{			if ($removeSpecialSymbol)			{				var pp:RegExp = /[(\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\")|( ){1,}]/gi;				var ps:RegExp = /( ){2,}/g;				var ssss:String = $string.replace(ps, " ");				//trace(ssss);				var ary:Array = ssss.split(pp);				var strrr:String = ary.join(" ");				return strrr.replace(ps, "").split(pp);			}			else				return $string.split($delim);		}				static public function removeSpecialCharacters($str:String):String		{			var pp:RegExp = /[(\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\")|( ){1,}]/gi;			return $str.replace(pp, "");		}				static public function getWordsFromSentence($string:String):Array		{			var wildString:String = "";			var pp0:RegExp = /(가\ ){1}|(과\ ){1}|(나\ ){1}|(는\ ){1}|(니\ ){1}|(다\ ){1}|(도\ ){1}|(든\ ){1}|(라\ ){1}|(랑\ ){1}|(를\ ){1}|(만\ ){1}|(며\ ){1}|(아\ ){1}|(야\ ){1}|(에\ ){1}|(엔\ ){1}|(엘\ ){1}|(여\ ){1}|(와\ ){1}|(요\ ){1}|(은\ ){1}|(을\ ){1}|(의\ ){1}|(이\ ){1}/gi;			var pp1:RegExp = /(같이\ ){1}|(같인\ ){1}|(과는\ ){1}|(과도\ ){1}|(과를\ ){1}|(과만\ ){1}|(과의\ ){1}|(까지\ ){1}|(까진\ ){1}|(나마\ ){1}|(는야\ ){1}|(다가\ ){1}|(다간\ ){1}|(대로\ ){1}|(더러\ ){1}|(든지\ ){1}|(라고\ ){1}|(라곤\ ){1}|(라도\ ){1}|(라서\ ){1}|(라야\ ){1}|(라오\ ){1}|(라지\ ){1}|(랑은\ ){1}|(로고\ ){1}|(로군\ ){1}|(로다\ ){1}|(로되\ ){1}|(로세\ ){1}|(마다\ ){1}|(마저\ ){1}|(만도\ ){1}|(만에\ ){1}|(만은\ ){1}|(만을\ ){1}|(만의\ ){1}|(만이\ ){1}|(만치\ ){1}|(만큼\ ){1}|(말고\ ){1}|(밖에\ ){1}|(밖엔\ ){1}|(보고\ ){1}|(보곤\ ){1}|(보다\ ){1}|(보단\ ){1}|(부터\ ){1}|(부턴\ ){1}|(에게\ ){1}|(에겐\ ){1}|(에나\ ){1}|(에는\ ){1}|(에다\ ){1}|(에도\ ){1}|(에든\ ){1}|(에로\ ){1}|(에를\ ){1}|(에만\ ){1}|(에서\ ){1}|(에선\ ){1}|(에야\ ){1}|(에의\ ){1}|(엔들\ ){1}|(엘랑\ ){1}|(와는\ ){1}|(와도\ ){1}|(와를\ ){1}|(와만\ ){1}|(와의\ ){1}|(으로\ ){1}|(으론\ ){1}|(이고\ ){1}|(이나\ ){1}|(이니\ ){1}|(이다\ ){1}|(이든\ ){1}|(이라\ ){1}|(이랑\ ){1}|(이며\ ){1}|(이야\ ){1}|(이여\ ){1}|(인들\ ){1}|(인즉\ ){1}|(일랑\ ){1}|(조차\ ){1}|(처럼\ ){1}|(치고\ ){1}|(커녕\ ){1}|(토록\ ){1}|(하고\ ){1}|(하곤\ ){1}/gi;			var pp2:RegExp = /(같이나\ ){1}|(같이는\ ){1}|(같이도\ ){1}|(같이만\ ){1}|(과만은\ ){1}|(까지가\ ){1}|(까지나\ ){1}|(까지는\ ){1}|(까지도\ ){1}|(까지로\ ){1}|(까지를\ ){1}|(까지만\ ){1}|(까지야\ ){1}|(까지에\ ){1}|(까지와\ ){1}|(까지의\ ){1}|(께옵서\ ){1}|(께옵선\ ){1}|(는커녕\ ){1}|(다가는\ ){1}|(다가도\ ){1}|(대로가\ ){1}|(대로는\ ){1}|(대로의\ ){1}|(더러는\ ){1}|(라고는\ ){1}|(라든지\ ){1}|(라야만\ ){1}|(라지요\ ){1}|(로구나\ ){1}|(로구려\ ){1}|(로구먼\ ){1}|(로군요\ ){1}|(마다를\ ){1}|(마다의\ ){1}|(마따나\ ){1}|(마저도\ ){1}|(마저야\ ){1}|(만으로\ ){1}|(만으론\ ){1}|(만큼도\ ){1}|(만큼만\ ){1}|(만큼씩\ ){1}|(만큼은\ ){1}|(만큼의\ ){1}|(말고는\ ){1}|(말고도\ ){1}|(밖에는\ ){1}|(밖에도\ ){1}|(보고는\ ){1}|(보고도\ ){1}|(보고만\ ){1}|(보다는\ ){1}|(보다도\ ){1}|(보다만\ ){1}|(보다야\ ){1}|(부터가\ ){1}|(부터는\ ){1}|(부터도\ ){1}|(부터를\ ){1}|(부터만\ ){1}|(부터의\ ){1}|(야말로\ ){1}|(에게가\ ){1}|(에게나\ ){1}|(에게는\ ){1}|(에게다\ ){1}|(에게도\ ){1}|(에게든\ ){1}|(에게로\ ){1}|(에게만\ ){1}|(에게며\ ){1}|(에게서\ ){1}|(에게선\ ){1}|(에게야\ ){1}|(에게와\ ){1}|(에게의\ ){1}|(에까지\ ){1}|(에까진\ ){1}|(에다가\ ){1}|(에다간\ ){1}|(에든지\ ){1}|(에라도\ ){1}|(에로의\ ){1}|(에만은\ ){1}|(에부터\ ){1}|(에서가\ ){1}|(에서나\ ){1}|(에서는\ ){1}|(에서도\ ){1}|(에서만\ ){1}|(에서야\ ){1}|(에서와\ ){1}|(에서의\ ){1}|(에하며\ ){1}|(와라도\ ){1}|(와만은\ ){1}|(와에만\ ){1}|(와처럼\ ){1}|(와한테\ ){1}|(으로가\ ){1}|(으로나\ ){1}|(으로는\ ){1}|(으로도\ ){1}|(으로랑\ ){1}|(으로만\ ){1}|(으로서\ ){1}|(으로선\ ){1}|(으로써\ ){1}|(으로야\ ){1}|(으로의\ ){1}|(은커녕\ ){1}|(이나마\ ){1}|(이든지\ ){1}|(이라고\ ){1}|(이라곤\ ){1}|(이라는\ ){1}|(이라도\ ){1}|(이라서\ ){1}|(이라야\ ){1}|(이랑은\ ){1}|(인즉슨\ ){1}|(일랑은\ ){1}|(조차가\ ){1}|(조차도\ ){1}|(조차를\ ){1}|(조차의\ ){1}|(처럼과\ ){1}|(처럼도\ ){1}|(처럼만\ ){1}|(처럼은\ ){1}|(치고는\ ){1}|(커녕은\ ){1}|(커니와\ ){1}|(하고가\ ){1}|(하고는\ ){1}|(하고도\ ){1}|(하고만\ ){1}|(하고야\ ){1}|(하고의\ ){1}/gi;			var pp3:RegExp = /(같이는야\ ){1}|(과는커녕\ ){1}|(까지나마\ ){1}|(까지는야\ ){1}|(까지든지\ ){1}|(까지라고\ ){1}|(까지라도\ ){1}|(까지로나\ ){1}|(까지로는\ ){1}|(까지로도\ ){1}|(까지로든\ ){1}|(까지로만\ ){1}|(까지로서\ ){1}|(까지로써\ ){1}|(까지만은\ ){1}|(까지조차\ ){1}|(께옵서는\ ){1}|(께옵서도\ ){1}|(께옵서만\ ){1}|(더러만은\ ){1}|(라고까지\ ){1}|(라고만은\ ){1}|(마다라도\ ){1}|(마다에게\ ){1}|(마저라도\ ){1}|(만으로는\ ){1}|(만으로도\ ){1}|(만으로써\ ){1}|(만이라도\ ){1}|(만큼이나\ ){1}|(만큼이야\ ){1}|(보고만은\ ){1}|(보다는야\ ){1}|(부터나마\ ){1}|(부터라도\ ){1}|(부터만은\ ){1}|(부터서는\ ){1}|(에게까지\ ){1}|(에게든지\ ){1}|(에게라도\ ){1}|(에게로는\ ){1}|(에게마다\ ){1}|(에게보다\ ){1}|(에게부터\ ){1}|(에게서가\ ){1}|(에게서나\ ){1}|(에게서는\ ){1}|(에게서도\ ){1}|(에게서만\ ){1}|(에게서야\ ){1}|(에게서와\ ){1}|(에게서의\ ){1}|(에게처럼\ ){1}|(에게하고\ ){1}|(에게하며\ ){1}|(에까지는\ ){1}|(에까지도\ ){1}|(에까지만\ ){1}|(에다가는\ ){1}|(에서까지\ ){1}|(에서나마\ ){1}|(에서든지\ ){1}|(에서라도\ ){1}|(에서만도\ ){1}|(에서만이\ ){1}|(에서만큼\ ){1}|(에서보다\ ){1}|(에서부터\ ){1}|(에서와는\ ){1}|(에서와의\ ){1}|(에서조차\ ){1}|(에서처럼\ ){1}|(에조차도\ ){1}|(으로까지\ ){1}|(으로든지\ ){1}|(으로라도\ ){1}|(으로만은\ ){1}|(으로부터\ ){1}|(으로서가\ ){1}|(으로서나\ ){1}|(으로서는\ ){1}|(으로서도\ ){1}|(으로서만\ ){1}|(으로서야\ ){1}|(으로서의\ ){1}|(으로써나\ ){1}|(으로써는\ ){1}|(으로써만\ ){1}|(으로써야\ ){1}|(이라고는\ ){1}|(이라고도\ ){1}|(이라든지\ ){1}|(이라야만\ ){1}|(이며에게\ ){1}|(이야말로\ ){1}|(처럼만은\ ){1}|(처럼이야\ ){1}|(하고라도\ ){1}|(하고마저\ ){1}|(하고만은\ ){1}|(하고에게\ ){1}|(하고조차\ ){1}/gi;			var pp4:RegExp = /(같이는커녕\ ){1}|(까지는커녕\ ){1}|(까지라고는\ ){1}|(까지로나마\ ){1}|(까지로는야\ ){1}|(까지로든지\ ){1}|(까지로라서\ ){1}|(까지로라야\ ){1}|(까지로만은\ ){1}|(까지야말로\ ){1}|(까지조차도\ ){1}|(께옵서는야\ ){1}|(께옵서만은\ ){1}|(께옵서만이\ ){1}|(라고까지는\ ){1}|(만으로라도\ ){1}|(만큼이라도\ ){1}|(부터야말로\ ){1}|(에게까지는\ ){1}|(에게까지도\ ){1}|(에게까지만\ ){1}|(에게는커녕\ ){1}|(에게보다는\ ){1}|(에게서까지\ ){1}|(에게서든지\ ){1}|(에게서라도\ ){1}|(에게서보다\ ){1}|(에게서부터\ ){1}|(에게서처럼\ ){1}|(에까지든지\ ){1}|(에까지라도\ ){1}|(에까지만은\ ){1}|(에서까지도\ ){1}|(에서만큼은\ ){1}|(에서부터는\ ){1}|(에서부터도\ ){1}|(에서부터만\ ){1}|(으로나든지\ ){1}|(으로부터는\ ){1}|(으로부터도\ ){1}|(으로부터만\ ){1}|(으로부터의\ ){1}|(으로서든지\ ){1}|(으로서라도\ ){1}|(으로서만도\ ){1}|(으로서만은\ ){1}|(으로써라도\ ){1}|(이라고만은\ ){1}|(이며조차도\ ){1}|(처럼이라도\ ){1}|(하고는커녕\ ){1}|(하고조차도\ ){1}/gi;			var pp5:RegExp = /(까지라고만은\ ){1}|(까지로는커녕\ ){1}|(까지만이라도\ ){1}|(께옵서는커녕\ ){1}|(마저나마라도\ ){1}|(보고만이라도\ ){1}|(에게까지만은\ ){1}|(에서부터라도\ ){1}|(에서부터만은\ ){1}|(으로까지만은\ ){1}|(으로부터만은\ ){1}|(으로부터서는\ ){1}|(으로부터서도\ ){1}|(으로부터서만\ ){1}/gi;			var pp6:RegExp = /(에게까지는커녕\ ){1}|(으로부터는커녕\ ){1}/gi;			var pp10:RegExp = /[(\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\")|( )]{1,}/gi;						wildString = $string.replace(pp10, " ");//			Debug.alert(wildString+"\n");			wildString = wildString.replace(pp6, "|");//			Debug.alert(wildString+"\n");			wildString = wildString.replace(pp5, "|");//			Debug.alert(wildString+"\n");			wildString = wildString.replace(pp4, "|");//			Debug.alert(wildString+"\n");			wildString = wildString.replace(pp3, "|");//			Debug.alert(wildString+"\n");			wildString = wildString.replace(pp2, "|");//			Debug.alert(wildString+"\n");			wildString = wildString.replace(pp1, "|");//			Debug.alert(wildString+"\n");			wildString = wildString.replace(pp0, "|");						var pp11:RegExp = /( ){1,}/g;			wildString = wildString.replace(pp11, "|");						return wildString.split("|");		}				static public function removeEnter($string:String):String		{			var regExp2:RegExp = /[\n]/g;			var new_str2:String = $string.replace(regExp2," ");						return new_str2;		}				static public function validateEmailAddress($emailString:String):Boolean 		{			var regExp:RegExp = /(\w|[_.\-])+@((\w|-)+\.)+\w{2,4}+/;			var resultObj:Object = regExp.exec($emailString);			if(resultObj == null)				return false;						return true;		}				static public function removeBlank($str:String):String		{			var rex:RegExp = /[\s\r\n]+/gim;						return $str.replace(rex,'');			//			var regExp:RegExp = / /g;//			return $str.replace(regExp,"");		}				public static function isKorean($str:String):Boolean		{			var pattern:RegExp = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;									var __len:int = $str.length;			var __str:String = $str;			for (var i:int=0;i<__len;i++)			{				trace("isKorean", __str, __str.length, __str.charCodeAt(0));				__str = __str.replace(pattern,"");				}						return !(__str.replace(pattern,"").length>0);		}		public static function isEnglish($str:String):Boolean		{			var pattern:RegExp = /([a-zA-Z0-9]|[\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\"]|[ ])/gi;			return !($str.replace(pattern,"").length>0);		}		public static function removeFirstBlank($str:String):String		{			var reg:RegExp  = /\s/;			var reg2:RegExp = /\S/;						if($str.search(reg)==0) 	$str = $str.slice($str.search(reg2));			return $str;		}		public static function removeLastBlank($str:String):String		{//			if($str.search(/\S\t|\n|\r/) == -1)	return $str; //			if($str.lastIndexOf(" ") == $str.length-1)	//			{//				return removeLastBlank($str.substr(0, $str.length-1));//			}//			else//			{//				return $str;//			}			if ($str.length == 0)	return "";						var rex:RegExp = /[\s\r\n\t]+/gim;//			var str:String = "This is            a string.";						var str:String = $str.replace(rex,'');						return str;		}				public static function getDateToString():String		{			var _date:Date = new Date();						return _date.fullYear.toString()+dateToString(_date.month+1)+dateToString(_date.date);		}				public static function getTimeToString():String		{			var _date:Date = new Date();			return dateToString(_date.hours)+dateToString(_date.minutes)+dateToString(_date.seconds);		}				public static function dateToString(value:int):String		{			if (value < 10)	return "0"+value.toString();			return value.toString();		}				public static function insertCommaToNum($num:int):String		{			var __num:String = $num.toString().replace( /\d{1,3}(?=(\d{3})+(?!\d))/g , "$&,");			return __num;		}				public static function textToBitmapdata($tf:TextField, $transparent:Boolean = true, $scale:Number = 1.0):BitmapData		{			var matrix:Matrix = new Matrix();			matrix.scale($scale, $scale);			var bd:BitmapData = new BitmapData($tf.width*$scale, $tf.height*$scale, true, 0x000000);			bd.draw($tf, matrix);			return bd;		}				public static function convertToHHMMSS($seconds:Number):String		{						var s:Number = $seconds % 60;			var m:Number = Math.floor(($seconds % 3600 ) / 60);			var h:Number = Math.floor($seconds / (60 * 60));						var hourStr:String = (h == 0) ? "" : doubleDigitFormat(h) + ":";			var minuteStr:String = doubleDigitFormat(m) + ":";			var secondsStr:String = doubleDigitFormat(s).slice(0,2);						return hourStr + minuteStr + secondsStr;		}				private static function doubleDigitFormat($num:Number):String		{			if ($num < 10) 			{				return ("0" + $num);			}			return String($num);		}	}}