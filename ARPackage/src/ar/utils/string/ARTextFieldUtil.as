/** * AnotherRainbow * @author Zzanzza */package ar.utils.string{	import flash.display.BitmapData;	import flash.geom.Matrix;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;		import flashx.textLayout.formats.VerticalAlign;
			public class ARTextFieldUtil {				public static const NAME_STRING:String = "%nameString%";		public function ARTextFieldUtil() {}				static public function inputNameTextToTextField($firstName:String, $textField:TextField, $etcText:String = ""):void		{			if ($etcText == "")				resizeInput($firstName, $textField);			else				resizeInput($etcText.replace(NAME_STRING, $firstName), $textField);						return;		}				static public function resizeInput($str:String, $textField:TextField):void		{			while(1)			{				$textField.text = $str;								//if ($textField.width < $textField.textWidth)				if ($textField.maxScrollV > 1)				{					var textFormat:TextFormat = $textField.getTextFormat();					var size:Number = textFormat.size as Number;					textFormat.size = size - 5;					$textField.defaultTextFormat = textFormat;					$textField.text = "";				}				else					break;			}		}								public static function makeTFbyString($str:String, $tfWidth:Number, $tfHeight:Number, $tfAlign:String, $fontSize:uint, $fontColor:uint = 0x000000):TextField		{			var __TF :TextField  = new TextField();			var __TFM:TextFormat = new TextFormat();						__TFM.font  = "_sans";			__TFM.size  = $fontSize;			__TFM.color = $fontColor;			__TF.defaultTextFormat = __TFM;						__TF.width     = $tfWidth;			__TF.height    = $tfHeight;			__TF.multiline = true;			__TF.wordWrap  = true;			__TF.autoSize  = $tfAlign;									switch($tfAlign)			{				case "left"  : __TF.htmlText  = "<p align='left'>"+$str+"</p>";			break;				case "center": __TF.htmlText  = "<p align='center'>"+$str+"</p>"; 		break;				case "right" : __TF.htmlText  = "<p align='right'>"+$str+"</p>";  		break;				default:																break;			}			return __TF;		}				public static function makeTextfield($str:String, $tfWidth:Number, $tfHeight:Number, $tfAlign:String, $fontSize:uint, $fontColor:uint = 0x000000):TextField		{			var __TF :TextField  = new TextField();			var __TFM:TextFormat = new TextFormat();						__TFM.font  = "_sans";			__TFM.size  = $fontSize;			__TFM.color = $fontColor;			__TFM.align = $tfAlign;			__TF.defaultTextFormat = __TFM;						__TF.width     = $tfWidth;			__TF.height    = $tfHeight;			__TF.text	   = $str;			return __TF;		}				public static function makeTextfieldAndTruncation($str:String, $tfWidth:Number, $tfHeight:Number, $tfAlign:String, $fontSize:uint, $fontColor:uint = 0x000000, $bold:Boolean=false):TextField		{			var __TF :TextField  = new TextField();			var __TFM:TextFormat = new TextFormat();						__TFM.font  = "_sans";			__TFM.size  = $fontSize;			__TFM.color = $fontColor;			__TFM.align = $tfAlign;			__TFM.bold = $bold;			__TF.defaultTextFormat = __TFM;						__TF.width     = $tfWidth;			__TF.height    = $tfHeight;			__TF.multiline = true;			__TF.wordWrap  = true;			__TF.text		= $str;						while ( __TF.numLines > 1 ) 				__TF.text = __TF.text.slice(0, -4) + "...";						return __TF;		}				public static function resizeTF($tf:TextField, $limitHeight:Number):TextField		{			if($tf.height > $limitHeight) 			{				var tfm:TextFormat = $tf.getTextFormat();				tfm.size = Number(tfm.size)- 1;				$tf.setTextFormat(tfm);				resizeTF($tf, $limitHeight);			}			return $tf;		}		public static function textToBitmapdata($tf:TextField, $transparent:Boolean = true, $scale:Number = 1.0):BitmapData		{			var matrix:Matrix = new Matrix();			matrix.scale($scale, $scale);			var bd:BitmapData = new BitmapData($tf.width*$scale, $tf.height*$scale, true, 0x000000);			bd.draw($tf, matrix);			return bd;		}		/*		static public function getFullName($firstName:String, $middleName:String, $lastName:String):String		{			var texts:Vector.<String> = Vector.<String>([$firstName, $middleName, $lastName]);			var fullName:String = "";			var tLen:uint = texts.length;			for (var i:uint = 0; i< tLen ;i++)			{				var txt:String = texts[i];				if (txt != "")				{					if (fullName != "")						fullName += " ";										fullName += txt;				}			}			//Debug.alert(fullName);			return fullName;		}				static public function getReducedFullName($firstName:String, $middleName:String, $lastName:String):String		{			var texts:Vector.<String> = Vector.<String>([$firstName, $middleName]);			var fullName:String = "";			var tLen:uint = texts.length;			for (var i:uint = 0; i< tLen ;i++)			{				var txt:String = texts[i];				if (txt != "")				{					if (fullName != "")						fullName += ".";										fullName += txt.charAt(0);				}			}						if ($lastName != "")			{				if (fullName != "")					fullName += " ";								fullName += $lastName;			}			//Debug.alert(fullName);			return fullName;		}				static public function getInitial($firstName:String, $middleName:String, $lastName:String):String		{			var texts:Vector.<String> = Vector.<String>([$firstName, $middleName, $lastName]);			var fullName:String = "";			var tLen:uint = texts.length;			for (var i:uint = 0; i< tLen ;i++)			{				var txt:String = texts[i];				if (txt != "")				{					if (fullName != "")						fullName += ".";										fullName += txt.charAt(0);				}			}			//Debug.alert(fullName);			return fullName;		}		*/	}	}