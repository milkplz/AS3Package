package ar.utils.load {	import ar.utils.bitmap.ARCropBitmapDataUtil;	import ar.utils.load.event.ARImageLoadEvent;	import ar.utils.load.model.ARImageDataModel;		import com.greensock.events.LoaderEvent;	import com.greensock.loading.ImageLoader;	import com.greensock.loading.LoaderMax;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.EventDispatcher;	import flash.utils.Dictionary;		/**	 * ...	 * @author Zzanzza	 */	public class ARImageMultiLoader extends EventDispatcher	{		private var 	emptyBasket			:Dictionary = null;		private var		queueImageVector	:Vector.<ARImageDataModel> = null;		private var 	_loader				:LoaderMax = new LoaderMax({name:"userImageLoader", onProgress:progressHandler, onComplete:completeHandler, onError:errorHandler});				public function ARImageMultiLoader() 		{			_loader.maxConnections = 10;		}		public function progressHandler($e:LoaderEvent):void {					}		public function get progress():Number		{			return _loader.progress;		}				public function completeHandler($e:LoaderEvent):void 		{//			//Debug.error($e.target + " is all sub complete!");			this.dispatchEvent(new ARImageLoadEvent(ARImageLoadEvent.IMAGE_LOAD_COMPLETE_OF_QUEUE));		}				public function errorHandler($e:LoaderEvent):void 		{//			//Debug.error("error occured with " + $e.target + ": " + $e.text);		}				public function multiLoad($vector:Vector.<ARImageDataModel>, $emptyDic:Dictionary):void		{//			//Debug.change("====== image load start");			queueImageVector = $vector;			emptyBasket = $emptyDic;						var len:uint = queueImageVector.length;			for (var i:uint = 0; i<len ; i++)			{				var dataModel:ARImageDataModel = queueImageVector[i];				var __imageLoader:ImageLoader = new ImageLoader(dataModel.url, {name:dataModel.id, onInit:subInitHandler, onComplete:subCompleteHandler, autoDispose:true, noCache:true});//				__imageLoader.				_loader.append(__imageLoader);//				Debug.alert("load image",dataModel.url);			}			_loader.load();		}		public function subCompleteHandler($e:LoaderEvent):void 		{//			//Debug.change($e.target + " is all sub complete!");					}		public function subInitHandler($e:LoaderEvent):void 		{			var __bit:BitmapData = (($e.target as ImageLoader).content.rawContent as Bitmap).bitmapData;			var __new:BitmapData = __bit.clone();			__bit.dispose();						var __result:BitmapData = null;							if (__new.width > 500 && __new.height > 500)				__result = ARCropBitmapDataUtil.cropLimitOfLength(__new,500,500);			else				__result = __new;						emptyBasket[($e.target as ImageLoader).name] = __result;//			Debug.bitmap(__result);		}			}	}